<style>
    /* Fixed height for CodeMirror editors */
    .CodeMirror {
        height: 300px !important;
        border: 1px solid #ddd;
    }
    
    /* Fixed height for test list */
    .test-list-container {
        max-height: 300px;
        overflow-y: auto;
    }
    
    /* Fixed height for feedback section */
    .feedback-container {
        max-height: 150px;
        overflow-y: auto;
    }
    
    /* Feedback status colors */
    .feedback-proceed-yes {
        background-color: #d4edda; /* Light green */
        color: #155724; /* Dark green text for contrast */
    }
    
    .feedback-proceed-no {
        background-color: #f8d7da; /* Light pink */
        color: #721c24; /* Dark red text for contrast */
    }
</style>

<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h2 class="h5 mb-0">{{stateDescription}}</h2>
                <div class="d-flex align-items-center">
                    <span class="badge bg-info me-3">LLM Cost: {{tokenUsage.formattedCost}}</span>
                    <form hx-post="/session/restart" hx-target="body">
                        <input type="hidden" name="sessionId" value="{{sessionId}}">
                        <button type="submit" class="btn btn-sm btn-outline-danger">Start Over</button>
                    </form>
                </div>
            </div>
            <div class="card-body">
                <!-- State context info can go here in the future -->
            </div>
        </div>
    </div>
</div>

<form id="code-form" hx-post="/session/submit" hx-target="body">
    <input type="hidden" name="sessionId" value="{{sessionId}}">
    
    <div class="row">
        <div class="col-md-3">
            <div class="card h-100">
                <div class="card-header">
                    <h3 class="h6 mb-0">Test Cases</h3>
                </div>
                <div class="card-body test-list-container">
                    <ul class="list-group mb-0">
                        {{#each testCases}}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                {{#if (and (eq ../state "PICK") (eq status "TODO"))}}
                                <input type="radio" name="selectedTestIndex" value="{{@index}}" class="me-2" required {{#if (eq (toString @index) ../selectedTestIndex)}}checked{{/if}}>
                                {{/if}}
                                {{description}}
                            </div>
                            {{#if (eq status "DONE")}}
                            <span class="badge bg-success">âœ“</span>
                            {{else if (eq status "IN_PROGRESS")}}
                            <span class="badge bg-warning">In Progress</span>
                            {{else}}
                            <span class="badge bg-secondary">Todo</span>
                            {{/if}}
                        </li>
                        {{/each}}
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-header">
                    <h3 class="h6 mb-0">Production Code</h3>
                </div>
                <div class="card-body">
                    <textarea id="production-code" name="productionCode" class="form-control code-editor" style="height: 300px;">{{productionCode}}</textarea>
                </div>
            </div>
        </div>
        
        <div class="col-md-5">
            <div class="card h-100">
                <div class="card-header">
                    <h3 class="h6 mb-0">Test Code</h3>
                </div>
                <div class="card-body">
                    <textarea id="test-code" name="testCode" class="form-control code-editor" style="height: 300px;">{{testCode}}</textarea>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-12">
            <div class="card mb-3">
                <div class="card-header">
                    <h3 class="h6 mb-0">Coach Feedback</h3>
                </div>
                <div class="card-body feedback-container
                    {{#if feedback}}
                        {{#if proceed}}
                            {{#if (eq proceed 'yes')}}
                                feedback-proceed-yes
                            {{else}}
                                feedback-proceed-no
                            {{/if}}
                        {{/if}}
                    {{/if}}
                ">
                    <div id="coach-feedback">
                        {{#if feedback}}
                        <p>{{feedback}}</p>
                        {{else}}
                        <p class="text-muted">Submit your work to get feedback from the coach.</p>
                        {{/if}}
                    </div>
                    <div id="hint" class="mt-2 p-2 border-start border-3 d-none" style="border-color: inherit;"></div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-2">
        <div class="col-12 text-center">
            <button type="submit" class="btn btn-primary">Submit</button>
            <button type="button" id="help-btn" class="btn btn-secondary ms-2" hx-post="/session/hint" hx-swap="none" hx-vals='{"sessionId": "{{sessionId}}"}'>Help Me</button>
            
            {{#if isTestingModeEnabled}}
                <a href="/prompt-tests/save?sessionId={{sessionId}}" class="btn btn-info ms-2 {{#unless feedback}}disabled{{/unless}}">
                    Save as Prompt Test
                </a>
            {{/if}}
        </div>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize CodeMirror for production code
        window.productionEditor = CodeMirror.fromTextArea(document.getElementById('production-code'), {
            mode: 'javascript',
            lineNumbers: true,
            theme: 'default',
            indentUnit: 2,
            tabSize: 2,
            height: '300px'
        });
        
        // Set fixed height for the CodeMirror editors
        document.querySelectorAll('.CodeMirror').forEach(function(editor) {
            editor.style.height = '300px';
        });
        
        // Initialize CodeMirror for test code
        window.testEditor = CodeMirror.fromTextArea(document.getElementById('test-code'), {
            mode: 'javascript',
            lineNumbers: true,
            theme: 'default',
            indentUnit: 2,
            tabSize: 2,
            height: '300px'
        });
        
        // Update textareas before form submission
        document.getElementById('code-form').addEventListener('submit', function() {
            window.productionEditor.save();
            window.testEditor.save();
        });
        
        // Handle hint retrieval, visibility and styling
        document.addEventListener('htmx:afterRequest', function(event) {
            // Check if this is a hint request
            if (event.detail.requestConfig && 
                event.detail.requestConfig.path && 
                event.detail.requestConfig.path.includes('/session/hint')) {
                
                try {
                    // Parse the response
                    const response = JSON.parse(event.detail.xhr.responseText);
                    const hintElement = document.getElementById('hint');
                    
                    // Set the hint text
                    hintElement.textContent = response.hint;
                    hintElement.classList.remove('d-none');
                    
                    // Apply appropriate border color based on proceed value
                    if (response.proceed === 'yes') {
                        hintElement.style.borderColor = '#155724'; // dark green
                    } else if (response.proceed === 'no') {
                        hintElement.style.borderColor = '#721c24'; // dark red
                    } else {
                        hintElement.style.borderColor = '#0d6efd'; // default blue
                    }
                } catch (error) {
                    console.error('Error processing hint response:', error);
                }
            }
        });
    });
</script>